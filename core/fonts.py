"""
Simple bitmap font system for MatrixPortal S3 Dashboard
Provides multiple sizes of a simple, pixel-perfect font for LED matrix displays.
"""

# --- Font Data ---

# 5x7 "large" font
FONT_5x7 = {
    'width': 5, 'height': 7, 'spacing': 1, 'data': {
    '0':[[1,1,1],[1,0,1],[1,0,1],[1,0,1],[1,1,1]],
    '1':[[0,1,0],[1,1,0],[0,1,0],[0,1,0],[1,1,1]],
    '2':[[1,1,1],[0,0,1],[0,1,0],[1,0,0],[1,1,1]],
    '3':[[1,1,1],[0,0,1],[0,1,1],[0,0,1],[1,1,1]],
    '4':[[1,0,1],[1,0,1],[1,1,1],[0,0,1],[0,0,1]],
    '5':[[1,1,1],[1,0,0],[1,1,1],[0,0,1],[1,1,1]],
    '6':[[1,1,1],[1,0,0],[1,1,1],[1,0,1],[1,1,1]],
    '7':[[1,1,1],[0,0,1],[0,1,0],[0,1,0],[0,1,0]],
    '8':[[1,1,1],[1,0,1],[1,1,1],[1,0,1],[1,1,1]],
    '9':[[1,1,1],[1,0,1],[1,1,1],[0,0,1],[1,1,1]],
    'A':[[1,1,1],[1,0,1],[1,1,1],[1,0,1],[1,0,1]],
    'B':[[1,1,0],[1,0,1],[1,1,0],[1,0,1],[1,1,0]],
    'C':[[0,1,1],[1,0,0],[1,0,0],[1,0,0],[0,1,1]],
    'D':[[1,1,0],[1,0,1],[1,0,1],[1,0,1],[1,1,0]],
    'E':[[1,1,1],[1,0,0],[1,1,0],[1,0,0],[1,1,1]],
    'F':[[1,1,1],[1,0,0],[1,1,0],[1,0,0],[1,0,0]],
    'G':[[0,1,1],[1,0,0],[1,0,1],[1,0,1],[0,1,1]],
    'H':[[1,0,1],[1,0,1],[1,1,1],[1,0,1],[1,0,1]],
    'I':[[1,1,1],[0,1,0],[0,1,0],[0,1,0],[1,1,1]],
    'J':[[0,0,1],[0,0,1],[0,0,1],[1,0,1],[0,1,0]],
    'K':[[1,0,1],[1,1,0],[1,1,0],[1,1,0],[1,0,1]],
    'L':[[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,1,1]],
    'M':[[1,0,1],[1,1,1],[1,1,1],[1,0,1],[1,0,1]],
    'N':[[1,0,1],[1,1,1],[1,1,1],[1,1,1],[1,0,1]],
    'O':[[1,1,1],[1,0,1],[1,0,1],[1,0,1],[1,1,1]],
    'P':[[1,1,1],[1,0,1],[1,1,1],[1,0,0],[1,0,0]],
    'Q':[[1,1,1],[1,0,1],[1,0,1],[1,1,1],[0,0,1]],
    'R':[[1,1,1],[1,0,1],[1,1,0],[1,0,1],[1,0,1]],
    'S':[[0,1,1],[1,0,0],[0,1,0],[0,0,1],[1,1,0]],
    'T':[[1,1,1],[0,1,0],[0,1,0],[0,1,0],[0,1,0]],
    'U':[[1,0,1],[1,0,1],[1,0,1],[1,0,1],[1,1,1]],
    'V':[[1,0,1],[1,0,1],[1,0,1],[0,1,0],[0,1,0]],
    'W':[[1,0,1],[1,0,1],[1,1,1],[1,1,1],[1,0,1]],
    'X':[[1,0,1],[0,1,0],[0,1,0],[0,1,0],[1,0,1]],
    'Y':[[1,0,1],[1,0,1],[0,1,0],[0,1,0],[0,1,0]],
    'Z':[[1,1,1],[0,0,1],[0,1,0],[1,0,0],[1,1,1]],
    ':':[[0,0,0],[0,1,0],[0,0,0],[0,1,0],[0,0,0]],
    ' ': [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    '-':[[0,0,0],[0,0,0],[1,1,1],[0,0,0],[0,0,0]],
    '.':[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0]],
    '?':[[1,1,1],[0,0,1],[0,1,0],[0,0,0],[0,1,0]],
}}

# 4x6 "medium" font
FONT_4x6 = {
    'width': 4, 'height': 6, 'spacing': 1, 'data': {
    '0':[[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]],
    '1':[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,1,1,1]],
    '2':[[1,1,1,1],[0,0,0,1],[0,1,1,0],[1,1,1,1]],
    '3':[[1,1,1,1],[0,0,1,1],[0,0,0,1],[1,1,1,1]],
    '4':[[1,0,0,1],[1,0,0,1],[1,1,1,1],[0,0,0,1]],
    '5':[[1,1,1,1],[1,0,0,0],[1,1,1,1],[0,0,0,1]],
    '6':[[1,1,1,1],[1,0,0,0],[1,1,1,1],[1,0,0,1]],
    '7':[[1,1,1,1],[0,0,0,1],[0,0,1,0],[0,1,0,0]],
    '8':[[1,1,1,1],[1,0,0,1],[1,1,1,1],[1,0,0,1]],
    '9':[[1,0,0,1],[1,1,1,1],[0,0,0,1],[1,1,1,1]],
    'A':[[0,1,1,0],[1,0,0,1],[1,1,1,1],[1,0,0,1]],
    'B':[[1,1,1,0],[1,0,0,1],[1,1,1,0],[1,0,0,1]],
    'C':[[0,1,1,1],[1,0,0,0],[1,0,0,0],[0,1,1,1]],
    'D':[[1,1,1,0],[1,0,0,1],[1,0,0,1],[1,1,1,0]],
    'E':[[1,1,1,1],[1,0,1,0],[1,0,1,0],[1,1,1,1]],
    'F':[[1,1,1,1],[1,0,1,0],[1,0,1,0],[1,0,0,0]],
    'G':[[0,1,1,1],[1,0,0,0],[1,0,0,1],[0,1,1,1]],
    'H':[[1,0,0,1],[1,0,0,1],[1,1,1,1],[1,0,0,1]],
    'I':[[1,1,1,1],[0,0,1,0],[0,0,1,0],[1,1,1,1]],
    'J':[[0,0,1,1],[0,0,0,1],[1,0,0,1],[0,1,1,0]],
    'K':[[1,0,0,1],[1,0,1,0],[1,1,0,0],[1,0,1,0]],
    'L':[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,1,1,1]],
    'M':[[1,0,0,1],[1,1,1,1],[1,0,0,1],[1,0,0,1]],
    'N':[[1,0,0,1],[1,1,0,1],[1,0,1,1],[1,0,0,1]],
    'O':[[0,1,1,0],[1,0,0,1],[1,0,0,1],[0,1,1,0]],
    'P':[[1,1,1,0],[1,0,0,1],[1,1,1,0],[1,0,0,0]],
    'Q':[[0,1,1,0],[1,0,0,1],[0,1,1,0],[0,0,0,1]],
    'R':[[1,1,1,0],[1,0,0,1],[1,1,1,0],[1,0,0,1]],
    'S':[[0,1,1,1],[1,0,0,0],[0,1,1,0],[1,1,1,0]],
    'T':[[1,1,1,1],[0,0,1,0],[0,0,1,0],[0,0,1,0]],
    'U':[[1,0,0,1],[1,0,0,1],[1,0,0,1],[0,1,1,1]],
    'V':[[1,0,0,1],[1,0,0,1],[0,1,0,1],[0,0,1,0]],
    'W':[[1,0,0,1],[1,0,1,1],[1,1,0,1],[1,0,0,1]],
    'X':[[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]],
    'Y':[[1,0,0,1],[0,1,1,0],[0,0,1,0],[0,0,1,0]],
    'Z':[[1,1,1,1],[0,0,1,0],[0,1,0,0],[1,1,1,1]],
    ':':[[0,0],[1,1],[0,0],[1,1]],
    ' ': [[0,0],[0,0],[0,0],[0,0]],
    '-':[[0,0],[1,1],[1,1],[0,0]],
    '.':[[0,0],[0,0],[0,0],[1,1]],
    '?':[[1,1,1],[0,0,1],[0,1,0],[0,1,0]],
}}

# 3x5 "tiny" font
FONT_3x5 = {
    'width': 3, 'height': 5, 'spacing': 1, 'data': {
    '0':[[1,1,1],[1,0,1],[1,0,1],[1,0,1],[1,1,1]],
    '1':[[0,1,0],[1,1,0],[0,1,0],[0,1,0],[1,1,1]],
    '2':[[1,1,1],[0,0,1],[0,1,0],[1,0,0],[1,1,1]],
    '3':[[1,1,1],[0,0,1],[0,1,1],[0,0,1],[1,1,1]],
    '4':[[1,0,1],[1,0,1],[1,1,1],[0,0,1],[0,0,1]],
    '5':[[1,1,1],[1,0,0],[1,1,1],[0,0,1],[1,1,1]],
    '6':[[1,1,1],[1,0,0],[1,1,1],[1,0,1],[1,1,1]],
    '7':[[1,1,1],[0,0,1],[0,1,0],[0,1,0],[0,1,0]],
    '8':[[1,1,1],[1,0,1],[1,1,1],[1,0,1],[1,1,1]],
    '9':[[1,1,1],[1,0,1],[1,1,1],[0,0,1],[1,1,1]],
    'A':[[1,1,1],[1,0,1],[1,1,1],[1,0,1],[1,0,1]],
    'B':[[1,1,0],[1,0,1],[1,1,0],[1,0,1],[1,1,0]],
    'C':[[0,1,1],[1,0,0],[1,0,0],[1,0,0],[0,1,1]],
    'D':[[1,1,0],[1,0,1],[1,0,1],[1,0,1],[1,1,0]],
    'E':[[1,1,1],[1,0,0],[1,1,0],[1,0,0],[1,1,1]],
    'F':[[1,1,1],[1,0,0],[1,1,0],[1,0,0],[1,0,0]],
    'G':[[0,1,1],[1,0,0],[1,0,1],[1,0,1],[0,1,1]],
    'H':[[1,0,1],[1,0,1],[1,1,1],[1,0,1],[1,0,1]],
    'I':[[1,1,1],[0,1,0],[0,1,0],[0,1,0],[1,1,1]],
    'J':[[0,0,1],[0,0,1],[0,0,1],[1,0,1],[0,1,0]],
    'K':[[1,0,1],[1,1,0],[1,1,0],[1,1,0],[1,0,1]],
    'L':[[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,1,1]],
    'M':[[1,0,1],[1,1,1],[1,1,1],[1,0,1],[1,0,1]],
    'N':[[1,0,1],[1,1,1],[1,1,1],[1,1,1],[1,0,1]],
    'O':[[1,1,1],[1,0,1],[1,0,1],[1,0,1],[1,1,1]],
    'P':[[1,1,1],[1,0,1],[1,1,1],[1,0,0],[1,0,0]],
    'Q':[[1,1,1],[1,0,1],[1,0,1],[1,1,1],[0,0,1]],
    'R':[[1,1,1],[1,0,1],[1,1,0],[1,0,1],[1,0,1]],
    'S':[[0,1,1],[1,0,0],[0,1,0],[0,0,1],[1,1,0]],
    'T':[[1,1,1],[0,1,0],[0,1,0],[0,1,0],[0,1,0]],
    'U':[[1,0,1],[1,0,1],[1,0,1],[1,0,1],[1,1,1]],
    'V':[[1,0,1],[1,0,1],[1,0,1],[0,1,0],[0,1,0]],
    'W':[[1,0,1],[1,0,1],[1,1,1],[1,1,1],[1,0,1]],
    'X':[[1,0,1],[0,1,0],[0,1,0],[0,1,0],[1,0,1]],
    'Y':[[1,0,1],[1,0,1],[0,1,0],[0,1,0],[0,1,0]],
    'Z':[[1,1,1],[0,0,1],[0,1,0],[1,0,0],[1,1,1]],
    ':':[[0],[1],[0],[1],[0]],
    ' ': [[0],[0],[0],[0],[0]],
    '-':[[0],[0],[1],[0],[0]],
    '.':[[0],[0],[0],[0],[1]],
    '?':[[1,1,1],[0,0,1],[0,1,0],[0,0,0],[0,1,0]],
}}

# --- Drawing Functions ---

def draw_text(buffer, text, x, y, color, font, max_width=None):
    """
    Draw text using a specified bitmap font.
    """
    char_width = font['width']
    char_spacing = font['spacing']
    total_width = 0
    
    for i, char in enumerate(text.upper()):
        char_x = x + (i * (char_width + char_spacing))
        
        if max_width and (char_x + char_width) > (x + max_width):
            break
            
        if char in font['data']:
            draw_char(buffer, char, char_x, y, color, font)
            total_width = char_x + char_width - x
        
    return total_width

def draw_char(buffer, char, x, y, color, font):
    """
    Draw a single character using a specified bitmap font.
    """
    if char not in font['data']:
        char = '?'
    
    pattern = font['data'][char]
    
    for row_idx, row in enumerate(pattern):
        for col_idx, pixel in enumerate(row):
            pixel_x = x + col_idx
            pixel_y = y + row_idx
            
            if pixel and 0 <= pixel_x < 64 and 0 <= pixel_y < 64:
                buffer[pixel_x, pixel_y] = color

def get_text_width(text, font):
    """Get the width in pixels that text would occupy with a given font."""
    char_width = font['width']
    char_spacing = font['spacing']
    return len(text) * (char_width + char_spacing) - char_spacing if text else 0

def truncate_text(text, max_width, font):
    """Truncate text to fit within max_width pixels for a given font."""
    char_width = font['width']
    char_spacing = font['spacing']
    effective_width = char_width + char_spacing
    
    if effective_width <= 0: return ""

    chars_per_width = max_width // effective_width
    
    if len(text) <= chars_per_width:
        return text
    
    if chars_per_width > 3:
        return text[:chars_per_width - 3] + "..."
    else:
        return text[:chars_per_width]